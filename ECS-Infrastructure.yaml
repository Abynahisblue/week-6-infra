AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Infrastructure for Containerized Web Application'

Parameters:
  ProjectName:
    Type: String
    Default: 'productsapp'
    Description: 'Name of the project for resource naming'

  EnvironmentName:
    Type: String
    Default: 'prod'
    Description: 'Environment name'

  ImageUri:
    Type: String
    Description: 'ECR Image URI for the application'
    Default: '314146322404.dkr.ecr.eu-central-1.amazonaws.com/productsapp-prod:latest'

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-${EnvironmentName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-${EnvironmentName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-container'
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8082
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${ProjectName}-${EnvironmentName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          Environment:
            - Name: DB_HOST
              Value: 
                Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabaseEndpoint'
            - Name: DB_PORT
              Value: 
                Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabasePort'
            - Name: DB_NAME
              Value: 'postgres'
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub 
                - 'jdbc:postgresql://${DBEndpoint}:${DBPort}/postgres'
                - DBEndpoint: 
                    Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabaseEndpoint'
                  DBPort: 
                    Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabasePort'
            - Name: JAKARTA_PERSISTENCE_JDBC_URL
              Value: !Sub 
                - 'jdbc:postgresql://${DBEndpoint}:${DBPort}/postgres'
                - DBEndpoint: 
                    Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabaseEndpoint'
                  DBPort: 
                    Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-DatabasePort'
            - Name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              Value: 'org.postgresql.Driver'
            - Name: SERVER_PORT
              Value: '8082'
            - Name: SPRING_JPA_HIBERNATE_DDL_AUTO
              Value: 'update'
            - Name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
              Value: '30000'
            - Name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              Value: '5'
            - Name: SPRING_JPA_PROPERTIES_HIBERNATE_TEMP_USE_JDBC_METADATA_DEFAULTS
              Value: 'false'
            - Name: SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_LOB_NON_CONTEXTUAL_CREATION
              Value: 'true'
            - Name: SPRING_PROFILES_ACTIVE
              Value: 'prod'
            - Name: S3_BUCKET
              Value: 
                Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-ImageBucketName'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/db/username'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/db/password'
            - Name: SPRING_DATASOURCE_USERNAME
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/db/username'
            - Name: SPRING_DATASOURCE_PASSWORD
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/db/password'
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/aws/access-key-id'
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub '/${ProjectName}/${EnvironmentName}/aws/secret-access-key'

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ProjectName}-${EnvironmentName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-ECSSecurityGroupId'
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-PrivateSubnetIds'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub '${ProjectName}-container'
          ContainerPort: 8082
          TargetGroupArn: !Ref TargetGroup
      DeploymentController:
        Type: CODE_DEPLOY

  # Target Group 1 (Blue)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-tg'
      Port: 8082
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-VPCId'
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Target Group 2 (Green)
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-tg2'
      Port: 8082
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-VPCId'
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: 
        Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-ALBArn'
      Port: 80
      Protocol: HTTP

  # Auto Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ProjectName}-${EnvironmentName}-scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${EnvironmentName}/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${EnvironmentName}/aws/*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ProjectName}-${EnvironmentName}*'

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: !Sub 'arn:aws:s3:::${ProjectName}-${EnvironmentName}-images-${AWS::AccountId}-${AWS::Region}'
                  - !Sub 'arn:aws:s3:::${ProjectName}-${EnvironmentName}-images-${AWS::AccountId}-${AWS::Region}'
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                Resource: '*'

Outputs:
  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ECSClusterName'

  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !Ref ECSService
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ECSServiceName'

  TaskDefinitionArn:
    Description: 'Task Definition ARN'
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-TaskDefinitionArn'

  ApplicationURL:
    Description: 'Application Load Balancer URL'
    Value: !Sub 
      - 'http://${ALBDNSName}'
      - ALBDNSName: 
          Fn::ImportValue: !Sub '${ProjectName}-${EnvironmentName}-ALBDNSName'

  ALBListenerArn:
    Description: 'The ARN of the ALB Listener'
    Value: !Ref ALBListener
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ALBListenerArn'

  TargetGroup1Name:
    Description: 'Target Group 1 Name (Blue)'
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-TargetGroup1Name'

  TargetGroup2Name:
    Description: 'Target Group 2 Name (Green)'
    Value: !Ref TargetGroup2
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-TargetGroup2Name'